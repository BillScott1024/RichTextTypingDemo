{"version":3,"sources":["../../../../../assets/Script/Dialog/assets/Script/Dialog/DialogRichText.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Dialog","sourcesContent":["// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n/**\n * 富文本打字机效果\n */\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class DialogRichText extends cc.Component {\n\n    @property(cc.RichText)\n    richTextNode: cc.RichText = null;\n\n    private richTextString: string = \"\";\n\n    private typeDuration: number = 2;\n\n    private typeStringArr: string[] = [];\n    \n    private isSkipType: boolean = false;\n\n    \n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n        // this.startType();\n        this.fitScreen();\n    }\n\n    private fitScreen() { \n        this.richTextNode.maxWidth = this.node.width - 20;\n        this.richTextNode.lineHeight = this.richTextNode.fontSize + 20;\n    }\n\n\n    public setupRichText(richTextString: string, duration: number = 2) { \n        this.richTextString = richTextString;\n        this.typeDuration = duration;\n        this.richTextNode.string = \"\";\n        this.startType();\n    }\n\n    \n    private startType() { \n        let str = this.richTextString;\n        if (!str) { \n            return;\n        }\n        const delimiterCharList = [\"✁\",\"⸘\",\"§\"];\n        const allRegexp = new RegExp(`<.+?\\/?>`, `g`);\n\n        //获取富文本标签\n        let matchArr = str.match(allRegexp);\n        //获取一个文本中没有的替换符号\n        let delimiterChar = delimiterCharList.find((item) => str.indexOf(item) === -1);\n        const textRegexp = new RegExp(`([^${delimiterChar}])`,`g`);\n        \n        //将所有的标签换成替换符号\n        let replaceStr = str.replace(allRegexp, delimiterChar);\n        //获取富文本中所有的文字\n        let textStr = replaceStr.match(textRegexp);\n        const textCount = textStr.length;\n        let tagInfoArr = [];\n        let index = 0;\n        //将替换符号的地方换成标签,文字都变成空字符串\n        for (let i = 0; i < replaceStr.length; i++) {\n            if (replaceStr[i] == delimiterChar) {\n                tagInfoArr[i] = matchArr[index++];\n            } else { \n                tagInfoArr[i] = \"\";\n            }\n            \n        }\n\n        //生成文本数据,放到一个数组中\n        for (let i = 0; i < textStr.length; i++) {\n            let index = tagInfoArr.findIndex((item) => {\n                return item === \"\";\n            });\n            if (index !== -1) { \n                tagInfoArr[index] = textStr[i];\n                this.typeStringArr.unshift(tagInfoArr.join(\"\"));\n            }\n        }\n\n        let configTypeInterval = this.typeDuration / (textCount - 1) ;\n\n        let typingCallback = () => {\n            if (!this.typeStringArr.length) {\n                return;\n            }\n            //每次拿最后一个数据\n            const content = this.typeStringArr.pop();\n\n            this.scheduleOnce(() => {\n                //如果点击了面板,则显示所有文本\n                if (this.isSkipType) {\n                    return;\n                }\n                this.richTextNode.string = content;\n                typingCallback();\n            }, configTypeInterval);\n\n        };\n        typingCallback();\n    }\n\n    onClickSkipType() { \n        this.typeStringArr = [];\n        this.richTextNode.string = '';\n        this.richTextNode.string = this.richTextString;\n        this.isSkipType = true;\n    }\n\n    onClickReplay() { \n        this.typeStringArr = [];\n        this.richTextNode.string = '';\n        this.isSkipType = false;\n        this.unscheduleAllCallbacks();\n        this.startType();\n    }\n\n    // update (dt) {}\n}\n"]}